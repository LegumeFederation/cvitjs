{"version":3,"sources":["Components/GenotypeSelect.js","Components/ReferenceForm.js","Components/CompareForm.js","Components/TrackOptionsSelect.js","Components/BaseOptionsSelect.js","Components/OptionsForm.js","App.js","serviceWorker.js","index.js"],"names":["popover","position","zIndex","cover","top","right","bottom","left","GenotypeSelector","state","selectedDataset","selectedGenotype","displayColorPicker","color","datasetChange","_this","setState","props","setDataset","append","dataset","genotype","appendDataset","idx","gtChange","colorClick","colorClose","formatDatasetValue","colorSet","hex","this","selected","_this2","_this$state","gtOpt","genotypes","react_default","a","createElement","className","onClick","style","background","lib","onChange","react_select_browser_esm","defaultValue","label","classNamePrefix","value","isClearable","isDisabled","options","datasets","length","undefined","removeOption","React","Component","ReferenceForm","GenotypeSelect_GenotypeSelector","CompareForm","count","rm","filter","opt","key","concat","addOption","A","prevProps","prevState","snapshot","displayFormats","comparisonFormats","heatFormat","heatColorFormat","TrackOptions","displayAs","compare","filters","heat","heatColor","viewConfig","maxValue","minValue","setConfiguration","format","side","forEach","gt","feature","glyph","display","draw_as","invert_value","min","max","width","offset","bin_size","bin_min","bin_max","by_class","class_filter","map","class_offset","draw_label","max_distance","border","border_width","count_classes","enable_pileup","generate_bins","class_space","optionsUpdate","toLowerCase","displayChange","compareChange","filterChange","heatColorChange","heatChange","maxChange","parseInt","target","hapMax","minChange","_this$state2","_this$props","filterFormats","isMulti","name","type","id","placeholder","onInput","e","rulerDisplayOptions","BaseOptions","rulerDisplay","binSize","rulerInterval","title","rulerChange","values","titleChange","binChange","intervalChange","OptionsForm","group","general","tick_interval","display_ruler","setOptions","BaseOptionsSelect_BaseOptions","TrackOptionsSelect_TrackOptions","App","referenceDataset","priorRequest","request","interval","response","loadDatasets","fetch","then","json","slice","val","result","JSON","parse","stringify","onSubmit","requestString","classes","query","i","hasOwnProperty","encodeURIComponent","Error","console","log","model","window","cvit","_viewConfig","_viewData","same","diff","total","appendData","method","headers","Content-Type","body","_viewLayout","chrOrder","_setChrOrder","setView","catch","vd","Object","keys","chr","maxScore","_combineObjects","_redraw","setDirty","_inform","gts","ReferenceForm_ReferenceForm","CompareForm_CompareForm","OptionsForm_OptionsForm","Boolean","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7011bb6b.chunk.js","sourcesContent":["import React, {Fragment} from 'react';\nimport Select from 'react-select';\nimport {SketchPicker} from 'react-color';\n\nconst popover = {\n\tposition: 'absolute',\n\tzIndex: '2'\n}\n\nconst cover = {\n\tposition: 'fixed',\n\ttop: '0px',\n\tright: '0px',\n\tbottom: '0px',\n\tleft: '0px',\n}\n\nexport default class GenotypeSelector extends React.Component {\n\n\tstate = {\n\t\tselectedDataset: null,\n\t\tselectedGenotype: null,\n\t\tdisplayColorPicker: false,\n\t\tcolor: '#19741A'\n\t}\n\n\tformatDatasetValue(){\n\t\treturn {\n\t\t\tdataset: this.state.selectedDataset || null,\n\t\t\tgenotype: this.state.selectedGenotype || null,\n\t\t\tcolor: this.state.color || null\n\t\t}\n\t}\n\n\tdatasetChange = (selectedDataset) => {\n\t\tthis.setState({ selectedDataset, selectedGenotype: null });\n\t\tthis.props.setDataset(selectedDataset);\n\t\tlet append = { dataset: selectedDataset, genotype:null, color: this.state.color||null};\n\t\tthis.props.appendDataset(this.props.idx, append)\n\t}\n\n\tgtChange = (selectedGenotype) => {\n\t\tthis.setState({ selectedGenotype });\n\t\tlet append = { dataset: this.state.selectedDataset, genotype: selectedGenotype, color: this.state.color||null};\n\t\tthis.props.appendDataset(this.props.idx, append);\n\t}\n\n\tcolorClick = () => {\n\t\tthis.setState({displayColorPicker : true})\n\t}\n\n\tcolorClose = () => {\n\t\tthis.setState({displayColorPicker : false})\n\t\tthis.props.appendDataset(this.props.idx, this.formatDatasetValue())\n\t}\n\n\tcolorSet = (color) => {\n\t\tthis.setState({color: color.hex})\n\t}\n\n\tcomponentDidMount() {\n\t\tif(this.props.selected){\n\t\t\tthis.setState({'selectedDataset':this.props.selected})\n\t\t}\n\t}\n\trender() {\n\t\tconst { selectedDataset, selectedGenotype } = this.state;\n\t\tconst { idx } = this.props;\n\t\tconst gtOpt = this.props.genotypes !== null ? this.props.genotypes : [];\n\t\treturn (\n\t\t\t<div>\n\t\t\t<div className={'row genotype-select'}>\n\t\t\t\t<div className={'one column '}>\n\t\t\t\t\t<span> Color </span>\n\t\t\t\t\t<div className={'fake-button git-option'} onClick={this.colorClick} style={{background:this.state.color, zIndex:1 }} />\n\t\t\t\t\t{ this.state.displayColorPicker\n\t\t\t\t\t\t?<div>\n\t\t\t\t\t\t\t<div style={ cover } onClick={this.colorClose} />\n\t\t\t\t\t\t\t<div style={ popover }>\n\t\t\t\t\t\t\t\t<SketchPicker color={ this.state.color } onChange={ this.colorSet } />\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t: null\n\t\t\t\t\t}\n\t\t\t\t</div>\n\t\t\t\t<div className={'five columns'}>\n\t\t\t\t\t<span> Dataset </span>\n\t\t\t\t\t<Select\n\t\t\t\t\t\tdefaultValue={this.props.selected || null}\n\t\t\t\t\t\tlabel=\"Dataset\"\n\t\t\t\t\t\tclassName=\"basic-single git-option\"\n\t\t\t\t\t\tclassNamePrefix=\"select\"\n\t\t\t\t\t\tvalue={selectedDataset}\n\t\t\t\t\t\tisClearable\n\t\t\t\t\t\tisDisabled={this.props.selected}\n\t\t\t\t\t\tonChange={this.datasetChange}\n\t\t\t\t\t\toptions={this.props.datasets}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t<div className={'four columns'}>\n\t\t\t\t\t<span> Genotype </span>\n\t\t\t\t\t<Select\n\t\t\t\t\t\tclassName=\"basic-single git-option\"\n\t\t\t\t\t\tclassNamePrefix=\"select\"\n\t\t\t\t\t\tvalue={selectedGenotype}\n\t\t\t\t\t\tisClearable\n\t\t\t\t\t\tisDisabled={gtOpt.length === 0}\n\t\t\t\t\t\tonChange={this.gtChange}\n\t\t\t\t\t\toptions={gtOpt}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t{this.props.removeOption !== undefined\n\t\t\t\t\t? <div className={'one column'}>\n\t\t\t\t\t\t<span>Remove</span>\n\t\t\t\t\t\t<div className={'fake-button git-option'} onClick={()=> this.props.removeOption(idx)} > X </div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t: null\n\t\t\t\t}\n\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}","import React from 'react';\nimport GenotypeSelector from './GenotypeSelect';\n\nexport default class ReferenceForm extends React.Component {\n\trender() {\n\n\t\treturn (\n\t\t\t<fieldset className={'genotype-field'}>\n\t\t\t\t<legend> Reference Genotype</legend>\n\t\t\t\t<GenotypeSelector\n\t\t\t\t\tdatasets={this.props.datasets}\n\t\t\t\t\tsetDataset={this.props.setDataset}\n\t\t\t\t\tappendDataset={this.props.appendDataset}\n\t\t\t\t\tgenotypes={this.props.genotypes}\n\t\t\t\t\tidx={0}\n\t\t\t\t/>\n\t\t\t</fieldset>\n\t\t);\n\t}\n}\n","import React from 'react';\nimport GenotypeSelector from './GenotypeSelect';\n/**\n * A counter button: tap the button to increase the count.\n */\nexport default class CompareForm extends React.Component {\n\n\tstate = {\n\t\toptions: [],\n\t\tcount: 1\n\t};\n\n\tremoveOption = (rm) => {\n\t\tlet options = this.state.options.filter(opt => {\n\t\t\treturn opt.key !== `${rm}`;\n\t\t});\n\t\tthis.props.appendDataset(rm,null);\n\t\tthis.setState({options});\n\t}\n\n\taddOption = () => {\n\t\tlet options = this.state.options.concat([\n\t\t\t<GenotypeSelector\n\t\t\t\tkey={this.state.count}\n\t\t\t\tidx={this.state.count}\n\t\t\t\tselected={this.props.selected}\n\t\t\t\tgenotypes={this.props.genotypes}A\n\t\t\t\tappendDataset={this.props.appendDataset}\n\t\t\t\tremoveOption={this.removeOption}\n\t\t\t/>\n\t\t]);\n\t\tthis.setState({options,count:this.state.count+1});\n\t};\n\n\tcomponentDidUpdate(prevProps, prevState, snapshot) {\n\t\tif(this.props.selected !== prevProps.selected){\n\t\t\tthis.setState({'count':1, 'options':[]})\n\t\t}\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<fieldset className={'genotype-field'}>\n\t\t\t\t<legend> Comparison Genotypes </legend>\n\t\t\t\t{this.state.options}\n\t\t\t\t<div\n\t\t\t\t\tclassName={'fake-button'}\n\t\t\t\t\tonClick={this.addOption}\n\t\t\t\t>\n\t\t\t\t\tAdd Comparison\n\t\t\t\t</div>\n\t\t\t</fieldset>\n\t\t);\n\t}\n}","import React, {Fragment} from 'react';\nimport Select from 'react-select';\n\nconst displayFormats = [\n    {\n        value: 'none',\n        label: 'None'\n    },\n    {\n        value: 'hist',\n        label: 'Histogram'\n    },\n    {\n        value: 'heat',\n        label: 'Heat'\n    },\n    {\n        value: 'haplo',\n        label: 'Haplotype',\n    },\n];\n\nconst comparisonFormats = [\n    {\n        value: 'diff',\n        label: 'Different'\n    },\n    {\n        value: 'same',\n        label: 'Same'\n    },\n    {\n        value: 'total',\n        label: 'Total'\n    },\n];\n\nconst heatFormat = [\n    {\n        value: 'low',\n        label: 'Min-Max'\n    },\n    {\n        value: 'high',\n        label: 'Max-Min'\n    },\n];\n\nconst heatColorFormat = [\n    {\n        value: 'black',\n        label: 'Black'\n    },\n    {\n        value: 'white',\n        label: 'White'\n    },\n];\n\nexport default class TrackOptions extends React.Component {\n    state = {\n        displayAs: displayFormats[0],\n        compare: comparisonFormats[0],\n        filters: [],\n        heat: heatFormat[0],\n        heatColor: heatColorFormat[0],\n        viewConfig: {},\n        maxValue: 0,\n        minValue: 0,\n    }\n\n    setConfiguration = (format) => {\n        const {compare,filters, maxValue, minValue} = this.state;\n        const side = this.props.side === 'Right';\n        let count = 0;\n        this.props.genotypes.forEach(gt => {if(gt !== null) count++;});\n        switch (format) {\n            case 'heat':\n                return {\n                    feature: compare.value,\n                    glyph: 'measure',\n                    display: 'heat',\n                    draw_as: 'range',\n                    invert_value: 0,\n                    min: 0,\n                    max: 0,\n                    width: 5,\n                    offset:  side ? 0 : -0,\n                    bin_size: 500000,\n                    bin_min: minValue,\n                    bin_max: maxValue,\n                    by_class: 1,\n                    class_filter: filters.map( filter => filter.value),\n                    class_offset: 2,\n                    draw_label: 0,\n                    max_distance: 5,\n                    border: 1,\n                    border_width :0,\n                };\n            case 'hist':\n                return {\n                    feature: compare.value,\n                    glyph: 'measure',\n                    display: 'histogram',\n                    count_classes: 1,\n                    enable_pileup: 0,\n                    generate_bins: 0,\n                    offset: side ? 0 : -0,\n                    width: 3,\n                    bin_min: minValue,\n                    bin_max: maxValue,\n                    bin_size: 500000,\n                    by_class: 1,\n                    class_offset : 0,\n                    class_filter: filters.map( filter => filter.value),\n                    draw_label: 0,\n                    max_distance: 75,\n                    border: 1,\n                    border_width :0,\n                };\n            case 'haplo':\n                return {\n                    feature : compare.value,\n                    glyph: 'measure',\n                    display: 'histogram',\n                    count_classes: 1,\n                    class_offset: 0,\n                    class_space : 1,\n                    enable_pileup: 0,\n                    generate_bins: 0,\n                    offset: side ? 0 : -0,\n                    width: 3,\n                    bin_min: maxValue -1 > 0 ? maxValue - 1 : 0 ,\n                    bin_max: maxValue > 0 ?  maxValue : 1,\n                    bin_size: 500000,\n                    by_class: 1,\n                    class_filter: filters.map( filter => filter.value),\n                    draw_label: 0,\n                    max_distance: 5,\n                    border: 1,\n                    border_width: 0,\n                };\n            case 'none':\n            default:\n                return {'feature':'none'};\n        }\n    };\n\n    optionsUpdate = (value) => {\n        this.props.optionsUpdate(this.props.side.toLowerCase(),value);\n    }\n\n    displayChange = (displayAs) => {\n        let viewConfig = this.setConfiguration(displayAs.value);\n        if(displayAs.value === 'haplo'){ // make sure haplotype block gets configured correctly\n            const maxValue = this.state.maxValue > 0 ? this.state.maxValue : 1;\n            const minValue = maxValue - 1;\n            this.setState({ displayAs,maxValue,minValue,viewConfig});\n        } else {\n            this.setState({displayAs, viewConfig});\n        }\n        this.optionsUpdate(viewConfig);\n    }\n\n    compareChange = (compare) => {\n        let viewConfig = this.state.viewConfig;\n        viewConfig.feature = compare.value;\n        this.setState({ compare, viewConfig });\n        this.optionsUpdate(viewConfig);\n    }\n\n    filterChange = (filters) => {\n        let viewConfig = this.state.viewConfig;\n        viewConfig.class_filter = filters.map(filter => {if(filter!== null) return filter.value});\n        this.setState({ filters, viewConfig });\n        this.optionsUpdate(viewConfig);\n    }\n\n    heatColorChange = (heatColor) => {\n        let viewConfig = this.state.viewConfig;\n        this.setState({ heatColor });\n        this.optionsUpdate(viewConfig);\n    }\n\n    heatChange = (heat) => {\n        let viewConfig = this.state.viewConfig;\n        viewConfig.invert_value = heat.value === 'low' ? 0 : 1;\n        this.setState({ heat, viewConfig });\n        this.optionsUpdate(viewConfig);\n    }\n\n    maxChange = (max) => {\n        const maxValue = parseInt(max.target.value) || 0;\n        let viewConfig = this.state.viewConfig;\n\n        if(this.state.displayAs.value === 'haplo'){\n            const hapMax = maxValue > 0 ? maxValue : 1;\n            const minValue = hapMax -1;\n            viewConfig.bin_max = hapMax;\n            viewConfig.bin_min = minValue;\n            this.setState({maxValue,minValue,viewConfig})\n        } else {\n            viewConfig.bin_max = maxValue;\n            this.setState({maxValue,viewConfig})\n        }\n        this.optionsUpdate(viewConfig);\n    }\n\n    minChange = (min) => {\n        const minValue = parseInt(min.target.value) || 0;\n        let viewConfig = this.state.viewConfig;\n        viewConfig.bin_min = minValue;\n        this.setState({minValue,viewConfig});\n        this.optionsUpdate(viewConfig);\n    }\n\n    render(props,state) {\n        const { displayAs, compare, filters, heatColor, heat, maxValue, minValue } = this.state;\n        const { side, genotypes } = this.props;\n        let filterFormats = [];\n        genotypes.forEach( (gt,count) => {\n            if((compare.value === 'total' || count > 0) && gt !== null){\n                filterFormats = filterFormats.concat( gt.genotype);\n            }\n        });\n\n        let filter = displayAs.value !== 'none'\n            ? (<div className={'four columns'}>\n                    <span>Filter Genotypes</span>\n                    <Select\n                        defaultValue={null}\n                        className=\"basic-multi-select git-option\"\n                        isMulti\n                        isClearable\n                        name={\"filterGT\"}\n                        classNamePrefix=\"select\"\n                        value={filters}\n                        onChange={this.filterChange}\n                        options={filterFormats}\n                    />\n                </div>\n            )\n            : null;\n\n        return (\n            <fieldset className={'genotype-field'}>\n                <legend> {`${side} Options`} </legend>\n                <div className={'row genotype-select'}>\n                    <div className={'two columns'}>\n                        <span>Display Type</span>\n                        <Select\n                            defaultValue={displayFormats[0]}\n                            className=\"basic-single git-option\"\n                            classNamePrefix=\"select\"\n                            value={displayAs}\n                            label={\"Display As:\"}\n                            onChange={this.displayChange}\n                            options={displayFormats}\n                        />\n                    </div>\n                    {displayAs.value != 'none' ?\n                        <div className={'two columns'}>\n                            <span>Comparison</span>\n                            <Select\n                                defaultValue={comparisonFormats[0]}\n                                className=\"basic-single git-option\"\n                                classNamePrefix=\"select\"\n                                value={compare}\n                                label={`Comparison ${side}`}\n                                onChange={this.compareChange}\n                                options={comparisonFormats}\n                            />\n                        </div>\n                        : null\n                    }\n                    {filter}\n                    {displayAs.value === 'none'\n                        ? null\n                        :\n                        <div className={'two columns'}>\n                            <span>{displayAs.value === 'heat' || displayAs.value === 'hist' ? 'Max Value' : 'Threshold' }</span>\n                            <input type={'text'} value={maxValue} className={'u-full-width git-option'} id={`max-${side}`} placeholder={'0'} onInput={(e) => this.maxChange(e)}/>\n\n                        </div>\n                    }\n                    {displayAs.value !== 'none' && displayAs.value !== 'haplo'\n                        ?\n                        <div className={'two columns'}>\n                            <span>Min Value</span>\n                            <input type={'text'} value={minValue} className={'u-full-width git-option'} id={`min-${side}`} placeholder={'0'} onInput={(e) => this.minChange(e)}/>\n                        </div>\n                        :\n                        null\n                    }\n                </div>\n                {displayAs.value === 'heat'\n                    ?\n                    <div className={'row genotype-select'}>\n                        <div className={'two columns'}>\n                            <div className={'u-full-width'}> <br/> </div>\n                        </div>\n                        <div className={'two columns'}>\n                            <span>Heat Base Color</span>\n                            <Select\n                                defaultValue={heatColorFormat[0]}\n                                className=\"basic-single git-option\"\n                                classNamePrefix=\"select\"\n                                value={heatColor}\n                                onChange={this.heatColorChange}\n                                options={heatColorFormat}\n                            />\n                        </div>\n                        <div className={'two columns'}>\n                            <span>Heat Direction</span>\n                            <Select\n                                defaultValue={heatFormat[0]}\n                                className=\"basic-single git-option\"\n                                classNamePrefix=\"select\"\n                                value={heat}\n                                onChange={this.heatChange}\n                                options={heatFormat}\n                            />\n                        </div>\n                    </div>\n                    :\n                    null}\n            </fieldset>\n        );\n    }\n}","import React from 'react';\nimport Select from 'react-select';\n\nconst rulerDisplayOptions = [\n    {\n        value: 'L',\n        label: 'Left'\n    },\n    {\n        value: 'R',\n        label: 'Right'\n    },\n    {\n        value: '1',\n        label: 'Both'\n    },\n    {\n        value: '0',\n        label: 'None'\n    },\n];\n\nexport default class BaseOptions extends React.Component {\n    state = {\n        rulerDisplay : rulerDisplayOptions[0],\n        binSize : 500000,\n        rulerInterval: 5000000,\n        title: '',\n    }\n\n    optionsUpdate = (value) => {\n        this.props.optionsUpdate('general',value);\n    }\n\n    rulerChange = (rulerDisplay) => {\n        let values = this.state;\n        values.rulerDisplay = rulerDisplay;\n        this.setState({rulerDisplay});\n        this.optionsUpdate(values);\n    }\n\n    titleChange = (e) => {\n        const title = e.target.value;\n        let values = this.state;\n        values.title = title;\n        this.setState({title});\n        this.optionsUpdate(values);\n    }\n\n    binChange = (e) => {\n        const binSize = parseInt(e.target.value) || 1;\n        let values = this.state;\n        values.binSize = binSize;\n        this.setState({binSize});\n        this.optionsUpdate(values);\n    }\n\n    intervalChange = (e) => {\n        const rulerInterval = parseInt(e.target.value) || 1;\n        let values = this.state;\n        values.rulerInterval = rulerInterval;\n        this.setState({rulerInterval});\n        this.optionsUpdate(values);\n    }\n\n    render(props,state) {\n        const { rulerDisplay, binSize, rulerInterval, title } = this.state;\n        return (\n            <fieldset className={'genotype-field'}>\n                <legend> General Options </legend>\n                <div className={'row genotype-select'}>\n                    <div className={'six columns'}>\n                        <span> Title </span>\n                        <input type={'text'} value={title} className={'u-full-width git-option'} id={`title-gen`} placeholder={''} onInput={e=>this.titleChange(e)} />\n                    </div>\n                    <div className={'two columns'}>\n                        <span> Bin Size </span>\n                        <input type={'text'} value={binSize} className={'u-full-width git-option'} id={`binsize-gen`} placeholder={'500000'} onInput={e=>this.binChange(e)}/>\n                    </div>\n                    <div className={'two columns'}>\n                        <span> Ruler Display </span>\n                        <Select\n                            defaultValue={rulerDisplayOptions[0]}\n                            className=\"basic-single git-option\"\n                            classNamePrefix=\"select\"\n                            value={rulerDisplay}\n                            label={\"Comparison\"}\n                            onChange={this.rulerChange}\n                            options={rulerDisplayOptions}\n                        />\n                    </div>\n                    {rulerDisplay.value !== '0'\n                        ?\n                        <div className={'two columns'}>\n                            <span> Ruler Interval </span>\n                            <input type={'text'} value={rulerInterval} className={'u-full-width git-option'} id={`rulertic-gen`}\n                                   placeholder={'5000000'} onInput={e=> this.intervalChange(e)}/>\n                        </div>\n                        : null\n                    }\n                </div>\n            </fieldset>\n        );\n    }\n}","import React from 'react';\nimport TrackOptions from \"./TrackOptionsSelect\";\nimport BaseOptions from \"./BaseOptionsSelect\";\n\nexport default class OptionsForm extends React.Component {\n\tstate = {\n\t\t'binSize': 500000,\n\t}\n\n\toptionsUpdate = (group,value) => {\n\t\tlet options = this.props.options;\n\n\t\tlet binSize = this.state.binSize;\n\t\tswitch (group) {\n\t\t\tcase 'left':\n\t\t\t\toptions.left = value;\n\t\t\t\toptions.left.bin_size = binSize;\n\t\t\t\tbreak;\n\t\t\tcase 'right':\n\t\t\t\toptions.right = value;\n\t\t\t\toptions.right.bin_size = binSize;\n\t\t\t\tbreak;\n\t\t\tcase 'general':\n\t\t\t\tbinSize = value.binSize;\n\t\t\t\toptions.general.title = value.title;\n\t\t\t\toptions.general.tick_interval = value.rulerInterval;\n\t\t\t\toptions.general.display_ruler = value.rulerDisplay.value;\n\t\t\t\toptions.left.bin_size = binSize;\n\t\t\t\toptions.right.bin_size = binSize;\n\t\t\t\tthis.setState({binSize});\n\t\t\t\tbreak;\n\t\t}\n\t\tthis.props.setOptions(options);\n\t}\n\n\trender(props,state) {\n\t\tconst { genotypes } = this.props;\n\t\treturn (\n\t\t\t<fieldset className={'genotype-field'} >\n\t\t\t\t<legend>Options </legend>\n\t\t\t\t<BaseOptions optionsUpdate={(group,value)=>this.optionsUpdate(group,value)} />\n\t\t\t\t<TrackOptions side={'Left'} genotypes={genotypes} optionsUpdate={(group,value)=>this.optionsUpdate(group,value)}/>\n\t\t\t\t<TrackOptions side={'Right'} genotypes={genotypes} optionsUpdate={(group,value)=>this.optionsUpdate(group,value)}/>\n\t\t\t</fieldset>\n\t\t);\n\t}\n}","import React from 'react';\nimport ReferenceForm from './Components/ReferenceForm';\nimport CompareForm from './Components/CompareForm';\nimport OptionsForm from './Components/OptionsForm';\n\nexport default class App extends React.Component {\n    state = {\n        datasets:[],\n        genotypes: {},\n        referenceDataset: null,\n        selected:[],\n        options: {\n            left:{\n                feature : 'none',\n                offset : -0,\n                draw_label : 0,\n            },\n            right:{\n                feature : 'none',\n                offset : 0,\n                draw_label : 0,\n            },\n            general:{\n                title:'',\n                display_ruler: 'L',\n                tick_interval: 5000000,\n            },\n        },\n        priorRequest:{\n            request:'',\n            interval:50000,\n            response:{}\n        }\n    }\n\n    loadDatasets = () => {\n        fetch('/api/experiment')\n            .then( response => response.json())\n            .then( datasets => {\n                this.setState({datasets});\n            })\n    }\n\n    appendDataset = (idx,value) => {\n        let selected = this.state.selected.slice();\n        selected[idx]=value;\n        this.setState({selected});\n    }\n\n    setDataset = (referenceDataset) => {\n        let val = referenceDataset.value;\n        if( !this.state.genotypes[val]){\n            fetch(`/api/experiment/${val}`)\n                .then(result => result.json())\n                .then( genotype => {\n                    let genotypes = JSON.parse(JSON.stringify(this.state.genotypes));\n                    genotypes[val] = genotype;\n                    this.setState({referenceDataset, genotypes, selected:[]})\n                })\n        } else {\n            this.setState({referenceDataset,selected:[]})\n        }\n    }\n\n    setOptions = (options) => {\n        this.setState(options);\n    }\n\n    onSubmit = () => {\n        const { selected, options, priorRequest } = this.state;\n        let requestString = '';\n        let classes = {};\n        let count = 0;\n        selected.forEach((query, i) => {\n            if (query !== null && query.hasOwnProperty('dataset') && query.hasOwnProperty('genotype')\n                && query.dataset != null && query.genotype != null){\n                count++;\n                requestString =  i === 0 ? requestString+'Ref=' : requestString+'&Variant=';\n                requestString = requestString+encodeURIComponent(`${query.dataset.value}:${query.genotype.value}`);\n                classes[query.genotype.value] = query.color;\n            } else if(i === 0){\n                throw new Error('Reference must be selected.')\n            }\n        });\n        classes['undefined'] = 'black';\n        console.log('request is', requestString);\n        // Configure cvit model for new view\n        let cvit = window.cvit;\n        let model = cvit.model;\n        model._viewConfig.classes = classes;\n\n        const binSize = options.left.hasOwnProperty('binSize') ? options.left.binSize :\n            options.right.binSize;\n        //fetch new data\n        if( (priorRequest.request !== requestString) ||\n            (binSize !== priorRequest.interval )\n        ) {\n            model._viewData.same = {};\n            model._viewData.diff = {};\n            model._viewData.total = {};\n\n            model.appendData('api/generateGff', {\n                method: 'POST',\n                headers: {'Content-Type': 'application/x-www-form-urlencoded'},\n                body: requestString,\n            })\n                .then(() =>{\n                    model._viewLayout.chrOrder = model._setChrOrder(model._viewData);\n                    this.setView(options, model, count);\n                    this.setState({priorRequest:{response: model._viewData, request:requestString, interval:binSize}})\n                })\n                .catch(e => {\n                    console.log('cvit js error: ', e);\n                });\n        } else {\n            console.log(options, model, count);\n            this.setView(options, model,count);\n        }\n    }\n\n    setView = (options,model,count) =>{\n        let max = 0;\n        let vd = model._viewData;\n        Object.keys(vd.total).forEach(key => {\n            let chr = vd.total[key];\n            if (chr.hasOwnProperty('maxScore') && chr.maxScore.value > max) max = chr.maxScore.value;\n        });\n        if(options.left.bin_max === 0){\n            options.left.bin_max = options.left.display === 'heat' ? max : max*count;\n        }\n        if(options.right.bin_max === 0){\n            options.right.bin_max = options.right.display === 'heat' ? max : max*count;\n        }\n        model._viewConfig.left.class_filter = [];\n        model._viewConfig.right.class_filter = [];\n        model._viewConfig = model._combineObjects(model._viewConfig, options);\n\n        model._redraw = true;\n        model.setDirty(true);\n        model._inform();\n    }\n\n    componentDidMount() {\n        this.loadDatasets()\n    }\n\n    render() {\n        const { selected,options } = this.state;\n        let gts = this.state.referenceDataset !== null && this.state.genotypes[this.state.referenceDataset.value] !== undefined\n            ? this.state.genotypes[this.state.referenceDataset.value]\n            : [];\n        return (\n            <div>\n                <h3>Genotype Investigation Tool</h3>\n                <div className={'u-full-width fake-button'}> Configure View </div>\n                <form>\n                    <ReferenceForm datasets={this.state.datasets} setDataset={this.setDataset} appendDataset={this.appendDataset} genotypes={gts} />\n                    {this.state.referenceDataset\n                        ? <CompareForm selected={this.state.referenceDataset} genotypes={gts} appendDataset={this.appendDataset} />\n                        : null\n                    }\n                    <OptionsForm setOptions ={this.setOptions} genotypes={selected} options={options}/>\n                </form>\n                <div className={'row'}>\n                    <button className={'three columns button-primary'} onClick={this.onSubmit}> Display </button>\n                    <div className={'three columns'}><br /></div>\n                    <button className={'three columns'}> Download </button>\n                    <button className={'three columns'}> Help </button>\n                </div>\n            </div>\n        );\n    }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport '../node_modules/skeleton.css/skeleton.css';\nimport './selector.css';\nimport './style.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('selector-app'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}